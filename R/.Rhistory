adapter_positions["PE1 R_1",1:100]
adapter_positions["PE1 R_1",1:150]
adapter_content <- read.table(paste0(input, "grada_table.txt"), header = TRUE)
adapter_content <- read.table("grada_table.txt", header = TRUE)
View(adapter_content)
load("/home/voges/Dokumente/GITHUB/GRADA/vignettes/temp/Adapter_Positions.Rdata")
View(adapter_positions)
View(adapter_positions)
row.names(adapter_positions)
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
print(adapter_name)
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- word(adapter_name, -1)
print(adapter)
}
word()
gsub
gsub("\\s*\\w*$", "", "Hello There!")
gsub("\\s*\\w*$", "", "Hello There! my")
gsub("\\s*\\w*$", "", "Hello There! my way")
gsub("\\s*\\w*$", "", "Hello There! my way was")
gsub("\\s*\\w*$", "", "Hello There")
gsub("\\s*\\w*$", "", "Hello There!")
gsub("\\s*\\w*$", "", "Hello There! ")
gsub("\\s*\\w*$", "", "Hello There")
gsub("\\s*\\w*$", "", "Hello There_")
gsub("\\s*\\w*$", "", "Hello There!")
gsub("\\s*\\w*$", "", "Hello There/")
gsub("\\s*\\w*$", "", "Hello There ")
substr("Hello There!",1,nchar("Hello There!")-2)
substr("Hello There!",2,nchar("Hello There!")-2)
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-3)
print(adapter)
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
print(adapter)
}
adapter_length <- adapter_content[adapter,"Length"]
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content[adapter,"Length"]
print(adapter, adapter_length)
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content[adapter,"Length"]
print(adapter, adapter_length)
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content[adapter,"Length"]
print(paste0(adapter, adapter_length))
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content["Adapter"=adapter,"Length"]
print(paste0(adapter, adapter_length))
}
adapter_content[which(Adapter = adapter)]
adapter_content[which(Adapter = adapter),]
adapter_content["Adapter"]
adapter_content[which("Adapter" == adapter)]
adapter_content[which("Adapter" == adapter)]
adapter_content[which("Adapter" == adapter),]
adapter_content[which("Adapter" == adapter)]
adapter_content[which("Adapter" == "AAA???")]
adapter_content[which("Adapter" == "AAA?")]
adapter_content["Adapter"]
adapter_content["Adapter",2]
adapter_content["Adapter",3]
adapter_content["Adapter",4]
adapter_content["Adapter"]
adapter_content["Adapter",1]
adapter_content["Adapter", 1]
adapter_content[1, "Adapter"]
adapter_content["AAA?", "Adapter"]
adapter_content[which("Adapter" == "AAA?"), "Adapter"]
adapter_content[which("Adapter" == "AAA?"), "Adapter"]
adapter_content[which("Adapter" == "AAA?"),]
adapter_content <- read.table("grada_table.txt", header = TRUE, row.names = 1)
View(adapter_content)
adapter_content[AAA?]
adapter_content[AAA?,]
adapter_content["AAA?",]
adapter_content["AAA?","Length"]
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content[adapter,"Length"]
print(paste0(adapter, adapter_length))
}
adapter_positions[adapter_name, 10]
adapter_positions[adapter_name]
adapter_positions[adapter_name,]
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
# get the plain adapter name:
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
# find the adapter length from "grada_table.txt"
adapter_length <- adapter_content[adapter,"Length"]
# go backwards (to not count the elonged adapters).
for(zpos in ncol(adapter_positions):1){
# add 1 count for the complete adapter positions:
if (adapter_positions[adapter_name,zpos] > 0){
for(j in 1:adapter_length-1){
if (adapter_positions[adapter_name,zpos+j] > ncol(adapter_positions)){
print("upsi!")
} else{
adapter_positions[adapter_name,zpos+j] <- adapter_positions[adapter_name,zpos+j] + adapter_positions[adapter_name,zpos]
}
}
}
}
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
# get the plain adapter name:
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
# find the adapter length from "grada_table.txt"
adapter_length <- adapter_content[adapter,"Length"]
# go backwards (to not count the elonged adapters).
for(zpos in ncol(adapter_positions):1){
# add 1 count for the complete adapter positions:
if (adapter_positions[adapter_name,zpos] > 0){
for(j in 1:adapter_length-1){
if (zpos+j > ncol(adapter_positions)){
print("upsi!")
} else{
adapter_positions[adapter_name,zpos+j] <- adapter_positions[adapter_name,zpos+j] + adapter_positions[adapter_name,zpos]
}
}
}
}
}
# Graph generation: (barplot simple one after another.)
par(mfrow=c(plot_row,plot_col))
for (i in row.names(adapter_positions)){
barplot(adapter_positions[i,],
col = '#FF69B4',
main = sprintf("%s (all pos!)", i),
las = 2,
cex.names = .8,
cex.main = .8,
border = NA)
}
for (i in row.names(adapter_positions)){
barplot(adapter_positions[i,],
col = '#FF4A4A',
main = sprintf("%s (all pos!)", i),
las = 2,
cex.names = .8,
cex.main = .8,
border = NA)
}
adapter_content <- read.table("grada_table.txt", header = TRUE, row.names = 1)
load(paste0(input, "Adapter_Positions.Rdata"))
load("/home/voges/Dokumente/GITHUB/GRADA/vignettes/temp/Adapter_Positions.Rdata")
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
# get the plain adapter name:
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
# find the adapter length from "grada_table.txt"
adapter_length <- adapter_content[adapter,"Length"]
# go backwards (to not count the elonged adapters).
for(zpos in ncol(adapter_positions):1){
# add 1 count for the complete adapter positions:
if (adapter_positions[adapter_name,zpos] > 0){
for(j in 1:adapter_length-1){
# get error for too long pos entry! This should not happen!
if (zpos+j > ncol(adapter_positions)){
print("upsi!")
} else{
adapter_positions[adapter_name,zpos+j] <- adapter_positions[adapter_name,zpos+j] + adapter_positions[adapter_name,zpos]
}
}
}
}
}
# Graph generation: (barplot simple one after another.)
par(mfrow=c(plot_row,plot_col))
for (i in row.names(adapter_positions)){
barplot(adapter_positions[i,],
col = '#FF4A4A',
main = sprintf("%s (all pos!)", i),
las = 2,
cex.names = .8,
cex.main = .8,
border = NA)
}
View(adapter_positions)
poslist <- c(0:(readlength-1))
readlength <- 10
poslist <- c(0:(readlength-1))
poslist <- append(poslits, c(1,10))
poslist <- append(poslist, c(1,10))
poslist
table(poslist)
View(adapter_positions)
adapter_positions <- rbind(adapter_positions, poscount)
poscount <- table(poslist)
poscount
adapter_positions <- rbind(adapter_positions, poscount)
View(adapter_positions)
poslist <- c(1,125)
poslist
poslist <- c(1:125)
poslist
poslist <- append(poslist, c(1,123,55,23)
)
poslist
poscount <- table(poslist)
for (i in 1:125) {poscount[i] <- poscount[i]-1}
poscount
adapter_positions <- rbind(adapter_positions, poscount)
View(adapter_positions)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
##### INIT #####
adapters <- matrix(ncol = 3, nrow = 0)
colnames(adapters) <- c("Adapter", "Sequence", "Length")
View(adapters)
adapters <- rbind(adapters, C("Test", "AGAA", 4))
adapters <- rbind(adapters, C("Test", "AGAA", "4"))
adapters <- rbind(adapters, c("Test", "AGAA", "4"))
View(adapters)
if ("AGAA" in adapters["Sequence"]){print("found")}
if ("AGAA" == adapters["Sequence"]){print("found")}
adapters["Sequence"]
adapters["Sequence",]
adapters[,"Sequence"]
if ("AGAA" == adapters[,"Sequence"]){print("found")}
if ("AGA" == adapters[,"Sequence"]){print("found")}
if ("AGAI" == adapters[,"Sequence"]){print("found")}
if ("AGAA" == adapters[,"Sequence"]){print("found")}
if ("AAAA" == adapters[,"Sequence"]){print("found")}
substring(">TEST",2)
substring(">TEST DER",2)
substring("> TEST DER",2)
trimws(" Hallo Welt")
trimws("Hallo Welt")
trimws("Hallo Welt", ">")
trimws("Hallo Welt")
trimws("!TEST", whitespace = "!")
trimws("!TEST", whitespace = ">")
trimws(">TEST", whitespace = ">")
trimws("> TEST", whitespace = ">")
trimws("> TEST", whitespace = ">, ")
trimws("> TEST", whitespace = ">")
trimws("> TEST", whitespace = "[>]")
trimws("> TEST", whitespace = "[>,]")
trimws("> TEST", whitespace = "[>, ]")
trimws("> TEST", whitespace = "[>, , !]")
trimws("> TEST", whitespace = "[>, , !, /]")
trimws("> TEST/", whitespace = "[>, , !, /]")
trimws("> TEST/", whitespace = "[>, , !]")
trimws("> TEST/!", whitespace = "[>, , !]")
adap_name <- trimws(line, whitespace = "[>,<, ,!]")
trimws("> TEST/!", whitespace = "[>, , !]")
adap_name <- "< Test Fucker"
trimws("> TEST/!", whitespace = "[>, , !]")
adap_name <- trimws(line, whitespace = "[>,<, ,!]")
line <- "> Test Fucker"
adap_name <- trimws(line, whitespace = "[>,<, ,!]")
adap_name
line <- "> Test Fucker "
adap_name <- trimws(line, whitespace = "[>,<, ,!]")
line <- "> Test Fucker "
adap_name <- trimws(line, whitespace = "[>,<, ,!]")
adap_name
devtools::document()
devtools::install()
paste0("agrep -")
a <- tes
a <- "tes"
a <- tes
paste0("agrep -", tes)
paste0("agrep -", a)
paste0("agrep - '", a, "'")
grada_analyze()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = example.fastq,    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = seq_adapter.txt,    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
a
paste0(a)
paste0("a")
paste0("'",a,"'")
devtools::document()
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example test.fastq",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example test.fastq",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
wd
setwd
setwd(..)
load("../example/temp/example/Adapter_Positions.Rdata")
barplot(adapter_positions[1,1])
barplot(adapter_positions[1,])
barplot(adapter_positions[2,])
barplot(adapter_positions[4,])
mjs_plot(adapter_positions[4,])
library(metricsgraphics)
mjs_plot(adapter_positions[4,])
adapter_positions[4,] %>%
mjs_plot()
adapter_positions[4,] %>%
mjs_plot() %>%
mjs_line()
View(adapter_positions)
View(adapter_positions)
adapter_positions["Index"]
View(adapter_positions)
View(adapter_positions["Index R_1"])
adapter_positions["Index R_1"]
adapter_positions["Index R_1",]
adapter_positions[colnames()]
adapter_positions[colnames(1)]
colnames(adapter_positions)
adapter_positions %>%
mjs_plot(x = colnames(adapter_positions) y = adapter_positions[4,]) %>%
mjs_line(area = TRUE)
adapter_positions %>%
mjs_plot(x = colnames(adapter_positions) y = adapter_positions[4,], width = 600) %>%
mjs_line(area = TRUE)
adapter_positions %>%
mjs_bar()
adapter_positions %>%
mjs_bar()
adapter_positions[4,] %>%
mjs_bar()
adapter_positions[4,] %>%
mjs_bar()
adapter_positions[4,] %>%
mjs_plot() %>%
mjs_bar()
adapter_positions[4,] %>%
mjs_plot(x = colnames(adapter_positions), y = adapter_positions[4,]) %>%
mjs_bar()
adapter_positions %>%
mjs_plot(x = colnames(adapter_positions), y = adapter_positions[4,]) %>%
mjs_bar()
adapter_positions %>%
mjs_plot(x = 1:150, y = adapter_positions[4,]) %>%
mjs_bar()
adapter_positions %>%
mjs_plot(x = 1:150, y = adapter_positions[4,]) %>%
mjs_bar()
View(adapter_positions)
adapter_positions %>%
mjs_plot(x = 1:150, y = Index R_1) %>%
mjs_bar()
adapter_positions %>%
mjs_plot(x = 1:150, y = "Index R_1") %>%
mjs_bar()
