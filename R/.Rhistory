devtools::document()
devtools::use_vignette("example")
usethis::use_vignette("example")
library(GRADA)
# The example data from Phage - SRX6454172 (first 100 reads) can be used to test the function.
read1 <- system.file("extdata", "grada_R1.fastq", package = "GRADA")
read2 <- system.file("extdata", "grada_R2.fastq", package = "GRADA")
seq <- system.file("extdata", "adapter_list.txt", package = "GRADA")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GRADA)
# The example data from Phage - SRX6454172 (first 100 reads) can be used to test the function.
read1 <- system.file("extdata", "grada_R1.fastq", package = "GRADA")
read2 <- system.file("extdata", "grada_R2.fastq", package = "GRADA")
seq <- system.file("extdata", "adapter_list.txt", package = "GRADA")
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will plot the found countings for mismatch = 0
# It needs the data from grada_table() !
grada_plot(PE = TRUE, readlength = 125, skip = TRUE)
source('~/Dokumente/Projecte_AG_Seifert/grada/Example.R')
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
savespot <- "temp/work/"
adapter_content <- read.table(paste0(savespot, "adapter_list.txt"), header = TRUE)
content_l <- length(adapter_content)-1
datatable(adapter_content, rownames = FALSE,
caption = "Table 1: Adapter Content in the FastQ-Files",
class = 'cell-border stripe',
extensions = c('Buttons', 'FixedColumns'),
options = list(dom = 'Bfrtip',
pageLength = 20,
lengthMenu = c(5, 10, 100),
buttons = list('copy', 'excel', 'pdf', 'pageLength', list(extend = 'colvis', columns = c(1:content_l))),
autoWidth = FALSE,
# seems not to effect anything:
# columnDefs = list(list(width = '100px', targets = c(1,2))),
fixedColumns = TRUE
)) %>%  formatRound(c(3:content_l+1), 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
source('~/Dokumente/Projecte_AG_Seifert/grada/Example.R')
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
datatable(iris)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
devtools::install_github("LucasFVoges/GRADA")
source('~/Dokumente/Projecte_AG_Seifert/grada/Example.R')
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
# This will render the DataTable (DT)
grada_table(PE = TRUE, seq = seq, read1 = read1, read2 = read2, M_min = 0)
datatable()
datatable(iris)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
tail("Test/")
tail("Test/", n=1)
substr("test", nchar(x) - n_last + 1, nchar(x))
substr("test", nchar("test") - n_last + 1, nchar(x))
substr("test", nchar("test") - 1 + 1, nchar(x))
substr("test", nchar("test") - 1 + 1, nchar("test"))
input <- "Test/"
if (substr(input, nchar(input) - 1 + 1, nchar(input)) == "/"){
print("Hello there")
}
input <- "Test"
if (substr(input, nchar(input) - 1 + 1, nchar(input)) == "/"){
print("Hello there")
}
substr(input, nchar(input) - 1 + 1, nchar(input))
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(GRADA)
library(parallel)
library(DT)
# This will plot the found countings for mismatch = 0
# It needs data from grada_analyze_positions()!
grada_plot_bar(PE = TRUE, readlength = 125, skip = TRUE, plot_row = 1, plot_col = 1, numCores = 1)
# This will plot the found countings for mismatch = 0
# It needs data from grada_analyze_positions()!
grada_plot_bar(PE = TRUE, skip = TRUE, plot_row = 1, plot_col = 1)
# This will plot the found countings for mismatch = 0
# It needs data from grada_analyze_positions()!
grada_plot_bar(PE = TRUE, skip = TRUE, plot_row = 2, plot_col = 2)
grada_plot()
# This will plot the found countings for mismatch = 0
# It needs data from grada_analyze_positions()!
grada_plot_bar(PE = TRUE, skip = TRUE, plot_row = 2, plot_col = 2)
# If the standard settings (like above) are applied, one could also use:
# grada_plot() = grada_plot_bar()
# This will plot the found countings for mismatch = 0
# It needs data from grada_analyze_positions()!
#grada_plot_bar(PE = TRUE, skip = TRUE, plot_row = 2, plot_col = 2)
# If the standard settings (like above) are applied, one could also use:
grada_plot()
#= grada_plot_bar()
devtools::document()
devtools::install()
devtools::install()
grada_analyze_positions(PE = TRUE, readlength = 125, numCores = 1)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
load("/home/voges/Dokumente/Projecte_AG_Seifert/talipot-plastid-assembly/subprojects/04_adapter_search_grep/scripts/temp/data1/Adapter_Positions.Rdata")
View(adapter_positions)
length(adapter_positions)
ncol(adapter_positions)
adapter_positions[1,150]
adapter_positions[1,151]
adapter_positions[2,150]
adapter_positions[3,150]
adapter_positions[4,150]
adapter_positions[5,150]
adapter_positions[5,150] <- adapter_positions[5,150] +1
adapter_positions[5,150]
adapter_positions["PE1 R_1"]
adapter_positions["PE1 R_1",1]
adapter_positions["PE1 R_1",2]
adapter_positions["PE1 R_1",3]
adapter_positions["PE1 R_1",4]
adapter_positions["PE1 R_1"]
adapter_positions["PE1 R_1",1:100]
adapter_positions["PE1 R_1",1:150]
adapter_content <- read.table(paste0(input, "grada_table.txt"), header = TRUE)
adapter_content <- read.table("grada_table.txt", header = TRUE)
View(adapter_content)
load("/home/voges/Dokumente/GITHUB/GRADA/vignettes/temp/Adapter_Positions.Rdata")
View(adapter_positions)
View(adapter_positions)
row.names(adapter_positions)
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
print(adapter_name)
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- word(adapter_name, -1)
print(adapter)
}
word()
gsub
gsub("\\s*\\w*$", "", "Hello There!")
gsub("\\s*\\w*$", "", "Hello There! my")
gsub("\\s*\\w*$", "", "Hello There! my way")
gsub("\\s*\\w*$", "", "Hello There! my way was")
gsub("\\s*\\w*$", "", "Hello There")
gsub("\\s*\\w*$", "", "Hello There!")
gsub("\\s*\\w*$", "", "Hello There! ")
gsub("\\s*\\w*$", "", "Hello There")
gsub("\\s*\\w*$", "", "Hello There_")
gsub("\\s*\\w*$", "", "Hello There!")
gsub("\\s*\\w*$", "", "Hello There/")
gsub("\\s*\\w*$", "", "Hello There ")
substr("Hello There!",1,nchar("Hello There!")-2)
substr("Hello There!",2,nchar("Hello There!")-2)
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-3)
print(adapter)
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
print(adapter)
}
adapter_length <- adapter_content[adapter,"Length"]
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content[adapter,"Length"]
print(adapter, adapter_length)
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content[adapter,"Length"]
print(adapter, adapter_length)
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content[adapter,"Length"]
print(paste0(adapter, adapter_length))
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content["Adapter"=adapter,"Length"]
print(paste0(adapter, adapter_length))
}
adapter_content[which(Adapter = adapter)]
adapter_content[which(Adapter = adapter),]
adapter_content["Adapter"]
adapter_content[which("Adapter" == adapter)]
adapter_content[which("Adapter" == adapter)]
adapter_content[which("Adapter" == adapter),]
adapter_content[which("Adapter" == adapter)]
adapter_content[which("Adapter" == "AAA???")]
adapter_content[which("Adapter" == "AAA?")]
adapter_content["Adapter"]
adapter_content["Adapter",2]
adapter_content["Adapter",3]
adapter_content["Adapter",4]
adapter_content["Adapter"]
adapter_content["Adapter",1]
adapter_content["Adapter", 1]
adapter_content[1, "Adapter"]
adapter_content["AAA?", "Adapter"]
adapter_content[which("Adapter" == "AAA?"), "Adapter"]
adapter_content[which("Adapter" == "AAA?"), "Adapter"]
adapter_content[which("Adapter" == "AAA?"),]
adapter_content <- read.table("grada_table.txt", header = TRUE, row.names = 1)
View(adapter_content)
adapter_content[AAA?]
adapter_content[AAA?,]
adapter_content["AAA?",]
adapter_content["AAA?","Length"]
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content[adapter,"Length"]
print(paste0(adapter, adapter_length))
}
adapter_positions[adapter_name, 10]
adapter_positions[adapter_name]
adapter_positions[adapter_name,]
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
# get the plain adapter name:
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
# find the adapter length from "grada_table.txt"
adapter_length <- adapter_content[adapter,"Length"]
# go backwards (to not count the elonged adapters).
for(zpos in ncol(adapter_positions):1){
# add 1 count for the complete adapter positions:
if (adapter_positions[adapter_name,zpos] > 0){
for(j in 1:adapter_length-1){
if (adapter_positions[adapter_name,zpos+j] > ncol(adapter_positions)){
print("upsi!")
} else{
adapter_positions[adapter_name,zpos+j] <- adapter_positions[adapter_name,zpos+j] + adapter_positions[adapter_name,zpos]
}
}
}
}
}
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
# get the plain adapter name:
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
# find the adapter length from "grada_table.txt"
adapter_length <- adapter_content[adapter,"Length"]
# go backwards (to not count the elonged adapters).
for(zpos in ncol(adapter_positions):1){
# add 1 count for the complete adapter positions:
if (adapter_positions[adapter_name,zpos] > 0){
for(j in 1:adapter_length-1){
if (zpos+j > ncol(adapter_positions)){
print("upsi!")
} else{
adapter_positions[adapter_name,zpos+j] <- adapter_positions[adapter_name,zpos+j] + adapter_positions[adapter_name,zpos]
}
}
}
}
}
# Graph generation: (barplot simple one after another.)
par(mfrow=c(plot_row,plot_col))
for (i in row.names(adapter_positions)){
barplot(adapter_positions[i,],
col = '#FF69B4',
main = sprintf("%s (all pos!)", i),
las = 2,
cex.names = .8,
cex.main = .8,
border = NA)
}
for (i in row.names(adapter_positions)){
barplot(adapter_positions[i,],
col = '#FF4A4A',
main = sprintf("%s (all pos!)", i),
las = 2,
cex.names = .8,
cex.main = .8,
border = NA)
}
adapter_content <- read.table("grada_table.txt", header = TRUE, row.names = 1)
load(paste0(input, "Adapter_Positions.Rdata"))
load("/home/voges/Dokumente/GITHUB/GRADA/vignettes/temp/Adapter_Positions.Rdata")
# advance all adapter positions:
for (adapter_name in row.names(adapter_positions)) {
# get the plain adapter name:
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
# find the adapter length from "grada_table.txt"
adapter_length <- adapter_content[adapter,"Length"]
# go backwards (to not count the elonged adapters).
for(zpos in ncol(adapter_positions):1){
# add 1 count for the complete adapter positions:
if (adapter_positions[adapter_name,zpos] > 0){
for(j in 1:adapter_length-1){
# get error for too long pos entry! This should not happen!
if (zpos+j > ncol(adapter_positions)){
print("upsi!")
} else{
adapter_positions[adapter_name,zpos+j] <- adapter_positions[adapter_name,zpos+j] + adapter_positions[adapter_name,zpos]
}
}
}
}
}
# Graph generation: (barplot simple one after another.)
par(mfrow=c(plot_row,plot_col))
for (i in row.names(adapter_positions)){
barplot(adapter_positions[i,],
col = '#FF4A4A',
main = sprintf("%s (all pos!)", i),
las = 2,
cex.names = .8,
cex.main = .8,
border = NA)
}
View(adapter_positions)
poslist <- c(0:(readlength-1))
readlength <- 10
poslist <- c(0:(readlength-1))
poslist <- append(poslits, c(1,10))
poslist <- append(poslist, c(1,10))
poslist
table(poslist)
View(adapter_positions)
adapter_positions <- rbind(adapter_positions, poscount)
poscount <- table(poslist)
poscount
adapter_positions <- rbind(adapter_positions, poscount)
View(adapter_positions)
poslist <- c(1,125)
poslist
poslist <- c(1:125)
poslist
poslist <- append(poslist, c(1,123,55,23)
)
poslist
poscount <- table(poslist)
for (i in 1:125) {poscount[i] <- poscount[i]-1}
poscount
adapter_positions <- rbind(adapter_positions, poscount)
View(adapter_positions)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
##### INIT #####
adapters <- matrix(ncol = 3, nrow = 0)
colnames(adapters) <- c("Adapter", "Sequence", "Length")
View(adapters)
adapters <- rbind(adapters, C("Test", "AGAA", 4))
adapters <- rbind(adapters, C("Test", "AGAA", "4"))
adapters <- rbind(adapters, c("Test", "AGAA", "4"))
View(adapters)
if ("AGAA" in adapters["Sequence"]){print("found")}
if ("AGAA" == adapters["Sequence"]){print("found")}
adapters["Sequence"]
adapters["Sequence",]
adapters[,"Sequence"]
if ("AGAA" == adapters[,"Sequence"]){print("found")}
if ("AGA" == adapters[,"Sequence"]){print("found")}
if ("AGAI" == adapters[,"Sequence"]){print("found")}
if ("AGAA" == adapters[,"Sequence"]){print("found")}
if ("AAAA" == adapters[,"Sequence"]){print("found")}
substring(">TEST",2)
substring(">TEST DER",2)
substring("> TEST DER",2)
trimws(" Hallo Welt")
trimws("Hallo Welt")
trimws("Hallo Welt", ">")
trimws("Hallo Welt")
trimws("!TEST", whitespace = "!")
trimws("!TEST", whitespace = ">")
trimws(">TEST", whitespace = ">")
trimws("> TEST", whitespace = ">")
trimws("> TEST", whitespace = ">, ")
trimws("> TEST", whitespace = ">")
trimws("> TEST", whitespace = "[>]")
trimws("> TEST", whitespace = "[>,]")
trimws("> TEST", whitespace = "[>, ]")
trimws("> TEST", whitespace = "[>, , !]")
trimws("> TEST", whitespace = "[>, , !, /]")
trimws("> TEST/", whitespace = "[>, , !, /]")
trimws("> TEST/", whitespace = "[>, , !]")
trimws("> TEST/!", whitespace = "[>, , !]")
adap_name <- trimws(line, whitespace = "[>,<, ,!]")
trimws("> TEST/!", whitespace = "[>, , !]")
adap_name <- "< Test Fucker"
trimws("> TEST/!", whitespace = "[>, , !]")
adap_name <- trimws(line, whitespace = "[>,<, ,!]")
line <- "> Test Fucker"
adap_name <- trimws(line, whitespace = "[>,<, ,!]")
adap_name
line <- "> Test Fucker "
adap_name <- trimws(line, whitespace = "[>,<, ,!]")
line <- "> Test Fucker "
adap_name <- trimws(line, whitespace = "[>,<, ,!]")
adap_name
devtools::document()
devtools::install()
devtools::document()
devtools::install()
shiny::runApp('C:/Users/Nobody/Desktop/GRADA/shiny/grada')
