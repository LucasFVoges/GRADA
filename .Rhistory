a --> 2
a <-- 2
a <- 2
b <- 45
install.packages(c("magrittr", "rprojroot"))
## Trimmomatic
Example:
```
```
a <- c(312.23, 3234.45, 223.34)
b <- c(222, 323)
wich(a %in% b)
which(a %in% b)
which(dim(a) %in% b)
which(a %in% b)
a <- data.frame(a, b)
a <- data.frame(a, a)
View(a)
124.23
a <- 124.23
round(a, digits = 1)
typeof(a)
install.packages("xaringan")
library(xaringan)
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
servr::daemon_stop(4)
unlink('Dokumente/Temp/TEST_UHH_MArkdown/UHH_Presentation_Template_cache', recursive = TRUE)
test
install.packages(devtools)
install.packages("devtools")
install.packages("roxygen2")
source('~/Dokumente/Projecte_AG_Seifert/grada/GRADA/Example.R')
grada_table(read1 = read1, read2 = read2)
grada_table(read1 = read1, read2 = read2)
grada_table(read1 = read1, read2 = read2)
library(GRADA)
grada_table(read1 = read1, read2 = read2)
install.packages(c("brio", "cachem", "cli", "cpp11", "crayon", "dplyr", "fansi", "httpuv", "knitr", "magick", "matrixStats", "rappdirs", "tibble", "tinytex", "withr"))
library(GRADA)
#system.time({                         # Benchmark
####### USER INPUT ##########
# Set this to "FALSE" for single end data or to check just one file ("read1")!
paired_data <- FALSE
# Input for the R1 and R2 read file
#read1 <-  "../../06_QC_fastp/data/fastp_2_R1_combined.fastq"
#read2 <-  "../../06_QC_fastp/data/fastp_2_R2_combined.fastq"
read1 <- system.file("extdata", "grada_R1.fastq", package = "GRADA")
read2 <- system.file("extdata", "grada_R1.fastq", package = "GRADA")
seq <- system.file("extdata", "adapter_list.txt", package = "GRADA")
# Input for the Adapters
input1 <- file(seq, "r")
# Maximal mismatches allowed:
missM_max <- 2
# Minimal mismatches allowed (has to be lower or equal than missM_max!):
missM_min <- 0
# Output for the temp date reads per adapter. ! Also Change in the next chunk !
savespot <- "temp/work/"
# Computer-Cores to use. std: detect automatically all available cores! But you could
numCores <- detectCores()/2
# numCores <- 2
#############################
##### INIT #####
adapters <- matrix(ncol = 3, nrow = 0)
colnames(adapters) <- c("Adapter", "Sequence", "Length")
### Read the adapter file ###
while (TRUE) {
line = trimws(readLines(input1, n = 1))       # read one line of the file
if (length(line) == 0 ) {                   # End of file
break
}
if (substr(line, 1, 1) == ">") {            # get the Adapter Name
adap_name <- substring(line, 2)
next
} else if (line == "") {                    # Skip any Blank Lines
next
}
if (adap_name == ""){
print("Could not read complete adapter file. There is a formating problem. Please check your adapters!")
break
}
adapters <- rbind(adapters, c(adap_name, line, nchar(line)))
adap_name <- ""
}
close(input1)
##### Functions #####
# writing reads :
find_adap_read <- function(Rnum, adapter, Mnum){
if (Mnum == missM_max){
if (Rnum == 1){read <- read1} else {read <- read2}
} else {
read <- paste0(savespot, "temp_R", Rnum, "_", adapter, "_M", Mnum+1, ".txt")
}
# This is the AGREP Unix function for finding the sequences:
system(paste0("agrep -", Mnum, " " , adapter, " ", read, " > ", savespot, "temp_R", Rnum, "_", adapter, "_M", Mnum, ".txt"), intern = FALSE, wait = TRUE)
# This is the counting Unix wc function:
system(paste0("wc -l ", savespot, "temp_R", Rnum, "_", adapter,"_M", Mnum, ".txt | cut -f1 -d' ' > ", savespot, "counts_temp_R", Rnum, "_", adapter,"_M", Mnum, ".txt"), intern = FALSE, wait = TRUE)
}
write_adap_read <- function(adapter){
if (paired_data){Rnum <- 1:2} else {Rnum <- 1:1}                  # check if paired data is TRUE.
for (M in missM_max:missM_min) {
mclapply(Rnum, find_adap_read, adapter, M, mc.silent = TRUE, mc.cores = tail(Rnum, n=1))        # and give to the find function
}
return(paste0(adapter, " seems to has finished"))
}
##### writing temp adapter_files #####
mclapply(adapters[,"Sequence"], write_adap_read, mc.silent = TRUE, mc.cores = numCores)
##### saving the count files to the list #####
if (paired_data == TRUE) {Rnum <- 2} else {Rnum <- 1}
for (R in 1:Rnum) {
for (M in missM_max:missM_min){
count_col <- c()
for (adapter in adapters[,"Sequence"]) {
counts <- read.delim(paste0(savespot,"counts_temp_R", R, "_", adapter,"_M", M, ".txt"), header = FALSE)
count_col <- c(count_col, as.integer(counts))
}
adapters <- cbind(adapters, count_col)
colnames(adapters)[colnames(adapters) == "count_col"] <- paste0("R",R,"M",M)
}
}
##### Results - writing table #####
write.table(adapters, file = paste0(savespot, "adapter_list.txt"), row.names = FALSE)
#### Delete count files ####
system(paste0("rm ", savespot, "counts_*"), intern = FALSE)
#})
savespot <- "temp/work/"
adapter_content <- read.table(paste0(savespot, "adapter_list.txt"), header = TRUE)
content_l <- length(adapter_content)-1
datatable(adapter_content, rownames = FALSE,
caption = "Table 1: Adapter Content in the FastQ-Files",
class = 'cell-border stripe',
extensions = c('Buttons', 'FixedColumns'),
options = list(dom = 'Bfrtip',
pageLength = 20,
lengthMenu = c(5, 10, 100),
buttons = list('copy', 'excel', 'pdf', 'pageLength', list(extend = 'colvis', columns = c(1:content_l))),
autoWidth = FALSE,
# seems not to effect anything:
# columnDefs = list(list(width = '100px', targets = c(1,2))),
fixedColumns = TRUE
)) %>%  formatRound(c(3:content_l+1), 0)
savespot <- "temp/work/"
#input2 <- file("../custom_adapters_2.txt", "r")
paired_data <- FALSE
numCores <- detectCores()/2
missM <- 0 # No Effect until now... (unix awk command has to change)
# Size of the rads must be set here!
adapter_positions <- matrix(ncol = 150, nrow = 0)
adapters <- read.table(paste0(savespot, "adapter_list.txt"), header = TRUE)
# Function:
find_positions <- function(adapter){
if (paired_data) {Rnum <- 1:2} else {Rnum <- 1:1}
mclapply(Rnum, find_positions_sec, adapter, mc.cores = tail(Rnum, n=1))
return(paste0(adapter, " has been prepared for plotting"))
}
find_positions_sec <- function(R, adapter){
poslist <- c(0:149)
awk_positions <- system(intern = TRUE, paste0("awk -v p=", adapter," 'index($0,p) {s=$0; m=0; while((n=index(s,p))>0){m+=n; printf \"%s,\", m; s=substr(s, n+1)}}' ", savespot, "temp_R", R, "_", adapter, "_M", missM,".txt"))
# build vector
positions <- as.vector(as.numeric(unlist(strsplit(awk_positions, ","))))
poslist <- append(poslist, positions)
# change points to frequency over the 150 nt.
poscount <- table(poslist)
# correction loop due to first creation of poslist.
for (i in 1:150) {
poscount[i] <- poscount[i] -1
}
save(poscount, file = paste0(savespot, paste0("Adapter_Positions_R", R, "_", adapter, "_M", missM, ".Rdata")))
}
# call function
mclapply(adapters[,"Sequence"], find_positions, mc.silent = TRUE,  mc.cores = numCores)
for (adapter_i in adapters[,"Sequence"]) {
if (paired_data){Rnum <- 1:2} else  {Rnum <- 1:1}
for (R in Rnum){
load(paste0(savespot, paste0("Adapter_Positions_R", R ,"_", adapter_i, "_M", missM, ".Rdata")))
adapter_positions <- rbind(adapter_positions, poscount)
# Change Rowname to Adapter
row.names(adapter_positions)[nrow(adapter_positions)] <- paste0(as.character(adapters[, "Adapter"][adapters[,"Sequence"] == adapter_i]), " R_", R)
}
}
# Save Data File for plotting.
save(adapter_positions, file = paste0(savespot, "Adapter_Positions.Rdata"))
#### Delete temp files ####
system(paste0("rm ", savespot, "Adapter_Positions_*"), intern = FALSE)
# Plot data
#library(ggplot2)
savespot <- "temp/work/"
paired_data <- FALSE
# par(mfrow = c(1, 2))
load(paste0(savespot, "Adapter_Positions.Rdata"))
# A copy for the second complete Adapter representation:
#adapter_positions_complete <- adapter_positions
# delete the data with no content!
if (paired_data){
kills <- c()
for (i in row.names(adapter_positions)){
a <- which(row.names(adapter_positions) == i)
if (a %% 2 == 0) {
next
}
if (sum(adapter_positions[a,]) == 0 && sum(adapter_positions[a+1,]) == 0){
kills <- c(kills, a, a+1)
}
}
} else {
kills <- c()
for (i in row.names(adapter_positions)){
a <- which(row.names(adapter_positions) == i)
if (sum(adapter_positions[a,]) == 0){
kills <- c(kills, a)
}
}
}
adapter_positions <- adapter_positions[-kills,]
# Graph generation: (barplot simple one after another.)
par(mfrow=c(2,2))
for (i in row.names(adapter_positions)){
barplot(adapter_positions[i,],
col = "#1b98e0",
main = sprintf("%s (1.Pos!)", i),
#ylim = c(0, 90000),
las = 2,
cex.names = .8,
cex.main = .8,
border = NA)
}
# fill the complete adapter: (not jet working)
# for(z in 150:1){
# counter <- adapter_positions_complete[counterding,z]
# if (counter >= 1){
#    for(j in 1:adapter_length[counterding]){
#      adapter_positions_complete[counterding,z+j] <- adapter_positions_complete[counterding,z+j] + counter
#    }
# }
# }
#barplot(adapter_positions_complete[counterding,], col = '#FF69B4', main = sprintf("%s (complete Adapter)", i), border = NA)
adapter_positions
# par(mfrow = c(1, 2))
load(paste0(savespot, "Adapter_Positions.Rdata"))
# par(mfrow = c(1, 2))
adapter_positions
View(adapter_positions)
adapter_positions_test <- adapter_positions[-1,]
adapter_positions
adapter_positions_test
adapter_positions_test <- adapter_positions[-1,]
adapter_positions_test <- adapter_positions[-(1,2),]
adapter_positions_test <- adapter_positions[-c(1,2),]
adapter_positions_test
adapter_positions_test <- adapter_positions[c(3),]
adapter_positions_test
adapter_positions_test <- as.matrix(adapter_positions[-c(1,2),])
adapter_positions_test
adapter_positions_test <- adapter_positions[-c(1,2),]
adapter_positions_test
row.names(adapter_positions_test)
row.names(adapter_positions)
length(kills)
length(adapter_positions)
nrow(adapter_positions)
kills
head(kills, -1)
head(kills, -1)
head(kills, -2)
head(kills, -1)
while (nrow(adapter_positions) - length(kills) < 2){head(kills, -1)}
kills
while ((nrow(adapter_positions) - length(kills)) < 2){kills <- head(kills, -1)}
kills
kills <- c(1,2,3,4,5,6)
kills
while ((nrow(adapter_positions) - length(kills)) < 2){kills <- head(kills, -1)}
kills
# Plot data
#library(ggplot2)
savespot <- "temp/work/"
paired_data <- FALSE
# par(mfrow = c(1, 2))
load(paste0(savespot, "Adapter_Positions.Rdata"))
# A copy for the second complete Adapter representation:
#adapter_positions_complete <- adapter_positions
# delete the data with no content!
if (paired_data){
kills <- c()
for (i in row.names(adapter_positions)){
a <- which(row.names(adapter_positions) == i)
if (a %% 2 == 0) {
next
}
if (sum(adapter_positions[a,]) == 0 && sum(adapter_positions[a+1,]) == 0){
kills <- c(kills, a, a+1)
}
}
} else {
kills <- c()
for (i in row.names(adapter_positions)){
a <- which(row.names(adapter_positions) == i)
if (sum(adapter_positions[a,]) == 0){
kills <- c(kills, a)
}
}
}
while ((nrow(adapter_positions) - length(kills)) < 2){kills <- head(kills, -1)}
adapter_positions <- adapter_positions[-kills,]
# Graph generation: (barplot simple one after another.)
par(mfrow=c(2,2))
for (i in row.names(adapter_positions)){
barplot(adapter_positions[i,],
col = "#1b98e0",
main = sprintf("%s (1.Pos!)", i),
#ylim = c(0, 90000),
las = 2,
cex.names = .8,
cex.main = .8,
border = NA)
}
# fill the complete adapter: (not jet working)
# for(z in 150:1){
# counter <- adapter_positions_complete[counterding,z]
# if (counter >= 1){
#    for(j in 1:adapter_length[counterding]){
#      adapter_positions_complete[counterding,z+j] <- adapter_positions_complete[counterding,z+j] + counter
#    }
# }
# }
#barplot(adapter_positions_complete[counterding,], col = '#FF69B4', main = sprintf("%s (complete Adapter)", i), border = NA)
# Plot data
#library(ggplot2)
savespot <- "temp/work/"
paired_data <- FALSE
# par(mfrow = c(1, 2))
load(paste0(savespot, "Adapter_Positions.Rdata"))
# A copy for the second complete Adapter representation:
#adapter_positions_complete <- adapter_positions
# delete the data with no content!
if (paired_data){
kills <- c()
for (i in row.names(adapter_positions)){
a <- which(row.names(adapter_positions) == i)
if (a %% 2 == 0) {
next
}
if (sum(adapter_positions[a,]) == 0 && sum(adapter_positions[a+1,]) == 0){
kills <- c(kills, a, a+1)
}
}
} else {
kills <- c()
for (i in row.names(adapter_positions)){
a <- which(row.names(adapter_positions) == i)
if (sum(adapter_positions[a,]) == 0){
kills <- c(kills, a)
}
}
}
while ((nrow(adapter_positions) - length(kills)) < 2){kills <- tail(kills, -1)}
adapter_positions <- adapter_positions[-kills,]
# Graph generation: (barplot simple one after another.)
par(mfrow=c(2,2))
for (i in row.names(adapter_positions)){
barplot(adapter_positions[i,],
col = "#1b98e0",
main = sprintf("%s (1.Pos!)", i),
#ylim = c(0, 90000),
las = 2,
cex.names = .8,
cex.main = .8,
border = NA)
}
# fill the complete adapter: (not jet working)
# for(z in 150:1){
# counter <- adapter_positions_complete[counterding,z]
# if (counter >= 1){
#    for(j in 1:adapter_length[counterding]){
#      adapter_positions_complete[counterding,z+j] <- adapter_positions_complete[counterding,z+j] + counter
#    }
# }
# }
#barplot(adapter_positions_complete[counterding,], col = '#FF69B4', main = sprintf("%s (complete Adapter)", i), border = NA)
devtools::document()
devtools::install_git("LucasFVoges/GRADA")
devtools::install_git("LucasFVoges/GRADA")
devtools::install_git("LucasFVoges/GRADA")
devtools::install_github("LucasFVoges/GRADA")
GRADA
??GRADA
grada_table
grada_table()
library(GRADA)
grada_table()
devtools::document()
setwd("~/Dokumente/GITHUB/GRADA")
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
install_github("StephanSeifert/SurrogateMinimalDepth")
devtools::install_github("StephanSeifert/SurrogateMinimalDepth")
