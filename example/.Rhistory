a[1]
a[12]
a[11]
load(*.txt)
choose(20,3)
choose(30,3)
regex_string <- ""
adapter <- "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
missM <- 3
length_adapter <- nchar(adapter)
char_adapter <- strsplit(adapter, "")[[1]]
# This will look in the pascal triangle for max number of possible combinations:
# Old: pt_possibils <- lapply(length_adapter, function(i) choose(i, missM))[[1]]
pt_possibils <- choose(length_adapter, missM)
# the combinations are available via combn()
pt_combinations <- combn(1:length_adapter, missM, simplify = TRUE)    # error if missM higher than length of adapter!
# generate the adapter regex:
for (possibles in 1:pt_possibils) {
this_char_adapter <- char_adapter
for (this_pos in pt_combinations[,possibles]){
if (!simplify_regex){
if (this_pos == length_adapter) {
# because insertion at the end is pointless.
this_char_adapter[this_pos] <- ".{0,1}"
} else {
# This allown Indels as well. Without it would be just "."
this_char_adapter[this_pos] <- paste0("(.{0,1}|", char_adapter[this_pos], ".)")
}
} else{
this_char_adapter[this_pos] <- "."
}
}
regex_string <- paste0(regex_string, paste0(this_char_adapter, collapse = ""), "|")
if (possibles == pt_possibils) {          # so in the end is no "|"
regex_string <- substr(regex_string, 1, nchar(regex_string)-1)
}
}
regex <- paste0("/",regex_string,"/")
regex_string
regex
# generate the adapter regex:
for (possibles in 1:pt_possibils) {
this_char_adapter <- char_adapter
for (this_pos in pt_combinations[,possibles]){
if (!simplify_regex){
if (this_pos == length_adapter) {
# because insertion at the end is pointless.
this_char_adapter[this_pos] <- ".{0,1}"
} else {
# This allown Indels as well. Without it would be just "."
this_char_adapter[this_pos] <- paste0("(.{0,1}|", char_adapter[this_pos], ".)")
}
} else{
this_char_adapter[this_pos] <- "."
}
}
regex_string <- paste0(regex_string, paste0(this_char_adapter, collapse = ""), "|")
if (possibles == pt_possibils) {          # so in the end is no "|"
regex_string <- substr(regex_string, 1, nchar(regex_string)-1)
}
}
simplyfy_regex <- FALSE
# generate the adapter regex:
for (possibles in 1:pt_possibils) {
this_char_adapter <- char_adapter
for (this_pos in pt_combinations[,possibles]){
if (!simplify_regex){
if (this_pos == length_adapter) {
# because insertion at the end is pointless.
this_char_adapter[this_pos] <- ".{0,1}"
} else {
# This allown Indels as well. Without it would be just "."
this_char_adapter[this_pos] <- paste0("(.{0,1}|", char_adapter[this_pos], ".)")
}
} else{
this_char_adapter[this_pos] <- "."
}
}
regex_string <- paste0(regex_string, paste0(this_char_adapter, collapse = ""), "|")
if (possibles == pt_possibils) {          # so in the end is no "|"
regex_string <- substr(regex_string, 1, nchar(regex_string)-1)
}
}
simplify_regex <- FALSE
for (this_pos in pt_combinations[,possibles]){
if (!simplify_regex){
if (this_pos == length_adapter) {
# because insertion at the end is pointless.
this_char_adapter[this_pos] <- ".{0,1}"
} else {
# This allown Indels as well. Without it would be just "."
this_char_adapter[this_pos] <- paste0("(.{0,1}|", char_adapter[this_pos], ".)")
}
} else{
this_char_adapter[this_pos] <- "."
}
}
regex <- paste0("/",regex_string,"/")
regex
# generate the adapter regex:
for (possibles in 1:pt_possibils) {
this_char_adapter <- char_adapter
for (this_pos in pt_combinations[,possibles]){
if (!simplify_regex){
if (this_pos == length_adapter) {
# because insertion at the end is pointless.
this_char_adapter[this_pos] <- ".{0,1}"
} else {
# This allown Indels as well. Without it would be just "."
this_char_adapter[this_pos] <- paste0("(.{0,1}|", char_adapter[this_pos], ".)")
}
} else{
this_char_adapter[this_pos] <- "."
}
}
regex_string <- paste0(regex_string, paste0(this_char_adapter, collapse = ""), "|")
if (possibles == pt_possibils) {          # so in the end is no "|"
regex_string <- substr(regex_string, 1, nchar(regex_string)-1)
}
}
regex <- paste0("/",regex_string,"/")
regex
read.table("Dokumente/Temp/csv.ods)
table <- read.table("Dokumente/Temp/csv.ods)
table <- read.table("Dokumente/Temp/csv.ods)
table <- read.table("Dokumente/Temp/csv.ods")
table <- read.table("Dokumente/Temp/csv.ods")
table <- read.table("Dokumente/Temp/csv.csv")
table
table <- read.table("Dokumente/Temp/csv.csv", sep = ",")
table
table <- read.table("Dokumente/Temp/csv.csv", sep = ",", header = TRUE)
table
table1 <- table[1,2]
table1 <- table[1:2]
table1
table2 <- table[3:4]
table2
table1[2]
table1[2][1]
table1[2,1]
table1[2]
table1[1,2]
table1[2,2]
table1[3,2]
table1[4,2]
for (i in table1[2]){print(i)}
for (i in table1){print(i)}
for (i in table1[1]){print(i)}
tatable1[9955,2]
table1[9955,2]
table1
table1[90342,2]
table1[90342]
table1[90342,2]
table1
length(table1)
table1[1]
table1[,1]
table1[,2]
table1[,1]
for (row in table1[,1]) {print(row) }
}
for (row in table1[,1]) {print(row) }
table1$Start
setwd("~/Dokumente/GITHUB/GRADA")
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M3.Rdata")
#### Load Data ####
plotlist <- list()
plotlist[[MMs+1]] <- adapter_positions
MMs <- 3
plotlist[[MMs+1]] <- adapter_positions
plotlist
MMs <- 2
plotlist[[MMs+1]] <- adapter_positions
plotlist
row.names(plotlist[[4]])
row.names(plotlist[[4]]["test R_1"])
plotlist[[4]]["test R_1"]
setwd("~/Dokumente/GITHUB/GRADA/example")
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=8, plot_row = 1, plot_col = 1)
library(GRADA)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=8, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, full_length = TRUE, input = "temp/example/", colour = 2, M_min = 0, M_max=8, plot_row = 1, plot_col = 1)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 8,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 8,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
write("TEST", file = "search.awk")
write()
adapter <- "AAA"
missM <- 2
R <- 1
input <- "temp/example/"
### AWK search for positions:
awk_string <- paste0(input, "temp_search_R", R, "_", adapter, "_M", missM, ".awk")
awk_string
regex_string <- adapter
regex_string <- "AAA|AAA|TTT"
write(x = paste0("match($0, /", regex_string, "/) {s=$0; m=0; while((n=match(s, /", regex_string, "/))>0){m+=n; printf \"%s,\", m; m+=", nchar(adapter)-1, "; s=substr(s, n+", nchar(adapter),")}}"), file = awk_string)
file("test.txt", "r")
a <- file("test.txt", "r")
a
content <- readLines(a)
content
close(a)
aregexec("aaa", content, fixed = TRUE, max.distance = 2)
a <- aregexec("aaa", content, fixed = TRUE, max.distance = 2)
a
devtools::document()
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter_2.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 8,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 8
)
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter_2.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 8,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 8
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=8, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, full_length = TRUE, input = "temp/example/", colour = 2, M_min = 0, M_max=8, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=8, plot_row = 1, plot_col = 1)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 8,
method = "awk"
)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=8, plot_row = 1, plot_col = 1)
devtools::document()
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 8,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 8,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 3,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 4,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 4,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 3,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 3,
method = "awk"
)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=3, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=3)
grada_plot_bar(PE = FALSE, skip = FALSE, full_length = TRUE, input = "temp/example/", colour = 2, M_min = 0, M_max=3, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, full_length = TRUE, input = "temp/example/", colour = 2, M_min = 0, M_max=3)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=3)
grada_plot_bar(PE = FALSE, skip = FALSE, full_length = TRUE, input = "temp/example/", colour = 2, M_min = 0, M_max=3)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=3)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 3,
method = "R"
)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=3)
aregexec("TEST", "TEST TEST TEST TEST", fixed = TRUE, max.distance = 2)
devtools::document()
devtools::install()
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter_2.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 8,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter_2.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 8,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 8,
method = "R"
)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_R1_AAAAAAAAAAAAAAAAAA_M0.Rdata")
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_R1_AAAAAAAAAAAAAAAAAA_M7.Rdata")
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_R1_AAAAAAAAAAAAAAAAAA_M8.Rdata")
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=8)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 4,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 4,
method = "R"
)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_R1_TGCTGCTGC_M0.Rdata")
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_R1_TGCTGCTGC_M4.Rdata")
poscount
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=4)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M4.Rdata")
View(adapter_positions)
grada_analyze(
PE = TRUE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = "example.fastq.gz",               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 4,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = TRUE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 4,
method = "R"
)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M4.Rdata")
View(adapter_positions)
grada_analyze_positions(
PE = TRUE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 4,
method = "awk"
)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M4.Rdata")
View(adapter_positions)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_R1_ACTTCTGGACT_M4.Rdata")
grada_analyze_positions(
PE = TRUE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 4,
method = "R"
)
grada_plot_bar(PE = TRUE, skip = FALSE, input = "temp/example/", colour = 2, M_min = 0, M_max=4)
grada_plot_bar(PE = TRUE, skip = FALSE, input = "temp/example/", colour = 1, M_min = 0, M_max=4)
load("/home/voges/Dokumente/Temp/temp/Adapter_Positions_M8.Rdata")
View(adapter_positions)
