devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "example.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/")
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "example.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/")
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "example.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 200,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/")
grada_plot_bar_full(PE = FALSE, skip = FALSE, input = "temp/example/")
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "example.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_plot_bar_full(PE = FALSE, skip = FALSE, input = "temp/example/")
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = FALSE,           # the tempoary files will be deleted now!
M_min = 1,
M_max = 1
)
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = FALSE,           # the tempoary files will be deleted now!
M_min = 1,
M_max = 1
)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
regex_string <- ""
for (base_pos in 1:nchar(adapter)) {
n <- 1
for (base in strsplit(adapter, "")[[1]]) {
if (n == base_pos) {
regex_string <- paste0(regex_string, ".")
} else {
regex_string <- paste0(regex_string, base)
}
n <- n + 1
}
regex_string <- paste0(regex_string, "|")
}
adapters <- read.table(paste0(input, "grada_table.txt"), header = TRUE)
input <- "temp/example/"
adapters <- read.table(paste0(input, "grada_table.txt"), header = TRUE)
adapters[,"Sequence"]
adapters[,"Sequence"][1]
adapters[,"Sequence"[1]]
adapters[,"Sequence"]
test <- adapters[, "Sequenze"]
test <- adapters[, "Sequence"]
test[1]
test[[1}]
test[[1]
test[[1]]
test[,1]
test[1.]
test[1,]
test
testâ€¦[1[1]]
test[1[1]]
type(test[1[1]])
typeof(test)
typeof(test[1])
typeof(test[1[1]])
test[1[1]]
as.character(test[1[1]])
adapter <- as.character(adapter)
devtools::document()
devtools::install()
library(GRADA)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = FALSE,           # the tempoary files will be deleted now!
M_min = 1,
M_max = 1
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = FALSE,           # the tempoary files will be deleted now!
M_min = 0,
M_max = 1
)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions.Rdata")
View(adapter_positions)
View(adapter_positions)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
regex_string <- ""
adapter <- "AAADTATSDRAE"
for (base_pos in 1:nchar(adapter)) {
n <- 1
for (base in strsplit(adapter, "")[[1]]) {
if (n == base_pos) {
regex_string <- paste0(regex_string, ".")
} else {
regex_string <- paste0(regex_string, base)
}
n <- n + 1
}
regex_string <- paste0(regex_string, "|")
}
regex <- paste0("/",regex_string,"/")
regex
regex_string <- ""
for (base_pos in 1:nchar(adapter)) {
n <- 1
for (base in strsplit(adapter, "")[[1]]) {
if (n == base_pos) {
regex_string <- paste0(regex_string, ".")
} else {
regex_string <- paste0(regex_string, base)
}
n <- n + 1
}
if (!base_pos == nchar(adapter)) {
regex_string <- paste0(regex_string, "|")
}
}
regex
regex_string
regex <- paste0("/",regex_string,"/")
regex
devtools::document()
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 1,
M_max = 1
)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions.Rdata")
View(adapter_positions)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 2,
M_max = 1
)
View(adapter_positions)
devtools::document()
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 2,
M_max = 1
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
devtools::document()
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
devtools::document()
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M0.Rdata")
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M1.Rdata")
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M2.Rdata")
devtools::document()
devtools::install()
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 2, M_max=2)
library(GRADA)
library(GRADA)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 2, M_max=2)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 1, M_max=2)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 1, M_max=2)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 1, M_max=2)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 2, M_max=2)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M2.Rdata")
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M1.Rdata")
View(adapter_positions)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M2.Rdata")
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M2.Rdata")
View(adapter_positions)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M2.Rdata")
View(adapter_positions)
View(adapter_positions)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M1.Rdata")
View(adapter_positions)
View(adapter_positions)
devtools::document()
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 1, M_max=2)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 2, M_max=2)
library(GRADA)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 1, M_max=2)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 2, M_max=2)
grada_plot_bar_full(PE = FALSE, skip = TRUE, input = "temp/example/")
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 1, M_max=2)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 2, M_max=2)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 2, M_max=2)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M0.Rdata")
View(adapter_positions)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M1.Rdata")
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M2.Rdata")
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M1.Rdata")
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 1,
M_max = 2
)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=0)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 2, M_max=0)
grada_plot_bar_full(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 2, M_max=0)
