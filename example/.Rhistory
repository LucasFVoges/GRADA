output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 5
)
load("/home/voges/Dokumente/GITHUB/GRADA/example/temp/example/Adapter_Positions_M3.Rdata")
View(adapter_positions)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter_2.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 3,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 3
)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter_2.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 4,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter_2.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 5,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 4
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 3
)
library(GRADA)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=3, plot_row = 1, plot_col = 1)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
devtools::install()
library(GRADA)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
devtools::install()
library(GRADA)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
devtools::install()
library(GRADA)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
devtools::install()
library(GRADA)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
devtools::install()
library(GRADA)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
devtools::install()
library(GRADA)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=1, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=0, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 2, M_max=2, plot_row = 1, plot_col = 1)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=0, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 1, M_max=0, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 1, M_max=3, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 1, M_max=4, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=3, plot_row = 1, plot_col = 1)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
sum(plotlist[[2]][1])
devtools::install()
devtools::install()
library(GRADA)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=0, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=0, plot_row = 1, plot_col = 1)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter_2.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=0, plot_row = 1, plot_col = 1)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter_2.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=0, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=0, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=1, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=1, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=1, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=1, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=1, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = TRUE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=0, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=1, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=3, plot_row = 1, plot_col = 1)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
color_chem <- c("#C6C6C6", "#ABABAB", "#919191", "#777777", "#5E5E5E", "#474747", "#303030", "#1B1B1B", "#000000")
color_chem
a <- c("test", "test2", "test3", "test4")
a
a[-1]
a[-1]
a[-1]
a<-a[-1]
a
a<-a[-1]
a
devtools::install()
library(GRADA)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
devtools::document()
devtools::install()
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=1, plot_row = 1, plot_col = 1)
library(GRADA)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
devtools::install()
library(GRADA)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
devtools::install()
library(GRADA)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 3,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/", M_min = 0, M_max=2, plot_row = 1, plot_col = 1)
plotlist
for (i in plotlist) {}
}
for (i in plotlist) {
}
for (i in plotlist) {
next
}
for (i in plotlist) {
print(i)
}
lapply(plotlist, print())
lapply(plotlist, print(x))
lapply(plotlist, print(X))
lapply(plotlist, print(plotlist))
for (i in plotlist) {
print(i)
}
for (i in plotlist) {
for
}
for (i in plotlist) {
for (adapter_name in row.names(i[,1])) {
print(adapter_name)
}
}
for (i in plotlist) {
for (adapter_name in row.names(i[,1])) {
print(adapter_name)
}
}
for (i in plotlist) {
for (adapter_name in row.names(i[,1])) {
print(adapter_name)
}
}
for (i in plotlist) {
for (adapter_name in row.names([[i]][,1])) {
print(adapter_name)
}
}
for (i in plotlist) {
for (adapter_name in row.names([[i]][,1])) {
print(adapter_name)
}
}
for (i in plotlist) {
for (adapter_name in row.names([[i]][,1])) {
print(adapter_name)
}
}
for (i in plotlist) {
for (adapter_name in row.names(i[,1])) {
print(adapter_name)
}
}
for (i in plotlist) {
for (adapter_name in row.names(i[,1])) {
print(adapter_name)
}
}
i
i[1,]
for (i in plotlist) {
for (adapter_name in row.names(i[,1])) {
print(adapter_name)
}
}
i
for (i in plotlist) {
for (adapter_name in row.names(i)) {
print(adapter_name)
}
}
# get the plain adapter name:
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_content <- read.table(paste0(input, "grada_table.txt"), header = TRUE, row.names = 1)
adapter_content <- read.table("temp/example/grada_table.txt")
# find the adapter length from "grada_table.txt"
adapter_length <- adapter_content[adapter,"Length"]
View(adapter_content)
# find the adapter length from "grada_table.txt"
adapter_length <- adapter_content[adapter,"Length"]
# find the adapter length from "grada_table.txt"
adapter_length <- adapter_content[adapter,"Length"]
adapter_length <- adapter_content[adapter,"Length"
]
View(adapter_content)
adapter_content[adapter,"Length"]
adapter_content[adapter]
adapter_content
adapter_content[adapter]
adapter_content[,adapter]
adapter_content[,adapter]
adapter_content["Length"]
adapter_content[,"Length"]
adapter_content
View(adapter_content)
View(adapter_content)
adapter_content <- read.table(paste0(input, "grada_table.txt"), header = TRUE, row.names = 1)
adapter_content <- read.table("temp/example/grada_table.txt"), header = TRUE, row.names = 1)
adapter_content <- read.table("temp/example/grada_table.txt", header = TRUE, row.names = 1)
# find the adapter length from "grada_table.txt"
adapter_length <- adapter_content[adapter,"Length"]
View(adapter_content)
# This screams for lapply. ... !!!MISMATCH PROBLEMATIK: Can be Longer than matrix!
for (i in row.names(plotlist[[missM+1]])){
adapter <- substr(i, 1, nchar(i)-4)
adapter_length <- adapter_content[adapter,"Length"]
for (MMs in M_max:M_min) {
}
}
missM <- 2
# This screams for lapply. ... !!!MISMATCH PROBLEMATIK: Can be Longer than matrix!
for (i in row.names(plotlist[[missM+1]])){
adapter <- substr(i, 1, nchar(i)-4)
adapter_length <- adapter_content[adapter,"Length"]
for (MMs in M_max:M_min) {
}
}
View(plotlist)
missM <- 1
# This screams for lapply. ... !!!MISMATCH PROBLEMATIK: Can be Longer than matrix!
for (i in row.names(plotlist[[missM+1]])){
adapter <- substr(i, 1, nchar(i)-4)
adapter_length <- adapter_content[adapter,"Length"]
for (MMs in M_max:M_min) {
}
}
# This screams for lapply. ... !!!MISMATCH PROBLEMATIK: Can be Longer than matrix!
for (i in row.names(plotlist[[missM+1]])){
adapter <- substr(i, 1, nchar(i)-4)
adapter_length <- adapter_content[adapter,"Length"]
# with one adapter go over all tables:
for (MMs in M_max:M_min) {
for(zpos in ncol(plotlist[[MMs+1]][i,]):1){
print(zpos)
}
}
}
M_min <- 0
M_max <- 1
# This screams for lapply. ... !!!MISMATCH PROBLEMATIK: Can be Longer than matrix!
for (i in row.names(plotlist[[missM+1]])){
adapter <- substr(i, 1, nchar(i)-4)
adapter_length <- adapter_content[adapter,"Length"]
# with one adapter go over all tables:
for (MMs in M_max:M_min) {
for(zpos in ncol(plotlist[[MMs+1]][i,]):1){
print(zpos)
}
}
}
ncol(plotlist[[1]][i,])
ncol(plotlist[[1]])
ncol(plotlist)
ncol(plotlist[1])
ncol(plotlist[[1]][1])
plotlist[[1]][1]
plotlist[[1]][0]
plotlist[[1]][150]
plotlist[[1]][151]
plotlist[[1]][155]
plotlist[[1]][160]
plotlist[[1]]
plotlist[[1]][1]
plotlist[[1]][1,]
plotlist[[1]][1,]
ncol(plotlist[[1]][1,])
nrow(plotlist[[1]][1,])
ncol(plotlist[[1]][1,])
ncol(plotlist[[1]][])
ncol(plotlist[[1]])
ncol(plotlist[[2]])
ncol(plotlist[[3]])
ncol(plotlist[[2]])
# This screams for lapply. ... !!!MISMATCH PROBLEMATIK: Can be Longer than matrix!
for (i in row.names(plotlist[[missM+1]])){
adapter <- substr(i, 1, nchar(i)-4)
adapter_length <- adapter_content[adapter,"Length"]
# with one adapter go over all tables:
for (MMs in M_max:M_min) {
for(zpos in ncol(plotlist[[MMs+1]]):1){
print(zpos)
}
}
}
ncol(plotlist[[1]])
(plotlist[[1]]
(plotlist[[1]]
)
)
plotlist[[1]]
plotlist[[1]][1]
plotlist[[1]][1,1]
plotlist[[1]][1,2]
plotlist[[1]][1,3]
plotlist[[1]][1,4]
plotlist[[1]][4,1]
# This screams for lapply. ...
for (adapter_name in row.names(plotlist[[missM+1]])){
adapter <- substr(adapter_name, 1, nchar(adapter_name)-4)
adapter_length <- adapter_content[adapter,"Length"]
# with one adapter go over all tables:
for (MMs in M_max:M_min) {
for(zpos in ncol(plotlist[[MMs+1]]):1){
if (plotlist[[MMs+1]][adapter_name,zpos] > 0){
for(j in 1:adapter_length-1){
if (!zpos+j > ncol(plotlist[[MMs+1]])){ #adapter problematc with indels
plotlist[[MMs+1]][adapter_name,zpos+j] <- plotlist[[MMs+1]][adapter_name,zpos+j] + plotlist[[MMs+1]][adapter_name,zpos]
}
}
}
}
}
}
View(plotlist)
plotlist
[[1]]
plotlist[[1]][1,]
plotlist[[1]][2,]
plotlist[[1]][3,]
plotlist[[1]][5,]
devtools::document()
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                 # analyze paired data (or 2 read files)
read1 = "example.fastq.gz",    # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,               # read2 file if PE
seq = "seq_adapter.txt",    # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
keepfiles = TRUE,           # keep them for analyze_positions! (can be deleted on the fly for very big data...)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2,
keepfiles = TRUE,           # the temporary files (from before) will be kept!
M_min = 0,
M_max = 2
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
```{r, eval=TRUE}3
library(GRADA)
