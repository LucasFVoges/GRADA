library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastqq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastqq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastqq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "temp/example/seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastqq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
line <- ""
if (line == "Test")
{print("yes")}
if (line == "Test"){print("yes")}
if (line == ""){print("yes")}
if (line == "H"){print("yes")}
colnames(adapters) <- c("Adapter", "Sequence", "Length")
##### INIT #####
adapters <- matrix(ncol = 3, nrow = 0)
colnames(adapters) <- c("Adapter", "Sequence", "Length")
if(line == adapters[,"Sequence"])
c
if(line == adapters[,"Sequence"]){print("Yes")}
length(adapters[,"Sequence"])
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastqq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
dir.exists("/temp")
dir.exists("temp/")
dir.exists("temp/example")
dir.exists("temp/example/")
dir.create("temp/example/")
dir.create("temp")
dir.create("temp/example/")
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
View(adapters)
View(adapters)
##### INIT #####
adapters <- matrix(ncol = 3, nrow = 0)
colnames(adapters) <- c("Adapter", "Sequence", "Length")
adapters <- rbind(adapters, c("Test", "AGAGA", 5))
length(adapters[,"Sequence"])
if( AGA == adapters[,"Sequence"])
d
if( AGA == adapters[,"Sequence"]){print("Yes")}
if( "AGA" == adapters[,"Sequence"]){print("Yes")}
if( "AGAGA" == adapters[,"Sequence"]){print("Yes")}
adapters <- rbind(adapters, c("Test2", "AGAGAT", 6))
View(adapters)
if( "AGAGA" == adapters[,"Sequence"]){print("Yes")}
if( "AGAGA" == adapters["Sequence"]){print("Yes")}
if( "AGAGA" == adapters[2,"Sequence"]){print("Yes")}
if( "AGAGA" == adapters[3,"Sequence"]){print("Yes")}
if( "AGAGA" == adapters[1:2,"Sequence"]){print("Yes")}
if( "AGAGA" == adapters[1,"Sequence"]){print("Yes")}
if( "AGAGA" %in% adapters[,"Sequence"]){print("Yes")}
if( "AGAGAT" %in% adapters[,"Sequence"]){print("Yes")}
if( "AGAT" %in% adapters[,"Sequence"]){print("Yes")}
##### INIT #####
adapters <- matrix(ncol = 3, nrow = 0)
colnames(adapters) <- c("Adapter", "Sequence", "Length")
if( "AGAT" %in% adapters[,"Sequence"]){print("Yes")}
if( "AGATA" %in% adapters[,"Sequence"]){print("Yes")}
devtools::install()
devtools::document()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
devtools::install()
devtools::install()
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "SRR137327111.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "example.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 250,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/")
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "example.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/")
grada_table_simple(input = "temp/example/")   # needs (kable, knitr)
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "example.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 200,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_plot_bar(PE = FALSE, skip = FALSE, input = "temp/example/")
grada_plot_bar_full(PE = FALSE, skip = FALSE, input = "temp/example/")
library(GRADA)
library(parallel)
grada_analyze(
PE = FALSE,                    # analyze paired data (or 2 read files)
read1 = "example.fastq", # read file (fastq, txt ... anything agrep works with.)
read2 = NULL,                  # read2 file if PE
seq = "seq_adapter.txt",       # adapter files
M_min = 0,                  # minimal mismatches (0 is required for plotting.)
M_max = 2,                  # maximal mismatches
output = "temp/example/",   # the folder for the created data (will be large)
numCores = detectCores()/2  # parallel computing (will be slow at "1")
)
grada_analyze_positions(
PE = FALSE,
readlength = 150,           # this option is needed, it is the maximal read length.
input = "temp/example/",    # grada_table.txt should be here!
numCores = detectCores()/2
)
grada_plot_bar_full(PE = FALSE, skip = FALSE, input = "temp/example/")
